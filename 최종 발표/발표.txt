https://www.miricanvas.com/v/125ezvc

DROP VIEW TICKET_VIEW; 
DROP VIEW AIRBOOK_VIEW;
DROP VIEW AIRDET_VIEW;

[ mysql]

-- 테이블 삭제
DROP TABLE AIRBOOK;
DROP TABLE AIRDET;
DROP TABLE AIROPT;
DROP TABLE AIRINFO;
DROP TABLE MEMBER;
DROP TABLE STATUS;

-- 테이블 확인
SELECT * FROM STATUS;
SELECT * FROM MEMBER;
SELECT * FROM AIRINFO;
SELECT * FROM AIROPT;
SELECT * FROM AIRDET;
SELECT * FROM AIRBOOK;

-- 회원등급 테이블
CREATE TABLE STATUS(
	STATUS_NUM INT PRIMARY KEY AUTO_INCREMENT,
	STATUS_NAME VARCHAR(10) NOT NULL
);

-- 회원 테이블
CREATE TABLE MEMBER(
	MEMBER_ID VARCHAR(30) BINARY PRIMARY KEY,
	MEMBER_PW VARCHAR(30) BINARY NOT NULL,
	MEMBER_NAME VARCHAR(30) NOT NULL,
	STATUS_NUM INT NOT NULL DEFAULT 2,
	FOREIGN KEY(STATUS_NUM) REFERENCES STATUS(STATUS_NUM) ON DELETE CASCADE
);

-- 항공정보 테이블
CREATE TABLE AIRINFO(
	AIRINFO_NUM INT PRIMARY KEY AUTO_INCREMENT,
	AIRINFO_AIRLINE VARCHAR(30) NOT NULL,
	AIRINFO_ROUTE VARCHAR(30) NOT NULL,
	AIRINFO_START TIME NOT NULL,
	AIRINFO_RETURN TIME NOT NULL,
	AIRINFO_PRICE INT NOT NULL,
	AIRINFO_DATE DATE NOT NULL DEFAULT (CURRENT_DATE)
);

-- 항공옵션 테이블
CREATE TABLE AIROPT(
	AIROPT_NUM INT PRIMARY KEY AUTO_INCREMENT,
	AIROPT_GRADE VARCHAR(30) NOT NULL,
	AIROPT_PRICE INT NOT NULL
);

-- 항공상세 테이블
CREATE TABLE AIRDET(
	AIRDET_NUM INT PRIMARY KEY AUTO_INCREMENT,
	AIRINFO_NUM INT NOT NULL,
	AIROPT_NUM INT NOT NULL,
	AIRDET_CNT INT NOT NULL,
	FOREIGN KEY(AIRINFO_NUM) REFERENCES AIRINFO(AIRINFO_NUM) ON DELETE CASCADE,
	FOREIGN KEY(AIROPT_NUM) REFERENCES AIROPT(AIROPT_NUM) ON DELETE CASCADE
);

-- 항공예매 테이블
CREATE TABLE AIRBOOK(
	AIRBOOK_NUM INT PRIMARY KEY AUTO_INCREMENT,
	MEMBER_ID VARCHAR(30) BINARY NOT NULL,
	AIRDET_NUM INT NOT NULL,
	AIRBOOK_CNT INT NOT NULL,
	AIRBOOK_CARD VARCHAR(16) NOT NULL,
	AIRBOOK_DATE DATE DEFAULT (CURRENT_DATE),
	FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE,
	FOREIGN KEY(AIRDET_NUM) REFERENCES AIRDET(AIRDET_NUM) ON DELETE CASCADE
);

-- 항공상세 뷰
CREATE VIEW AIRDET_VIEW
AS
(
	SELECT ad.AIRDET_NUM, ai.AIRINFO_NUM, ai.AIRINFO_AIRLINE, ai.AIRINFO_ROUTE, ai.AIRINFO_START, ai.AIRINFO_RETURN, (ai.AIRINFO_PRICE * ao.AIROPT_PRICE) AS PRICE, ai.AIRINFO_DATE, ao.AIROPT_GRADE, ad.AIRDET_CNT
	FROM AIRDET ad JOIN AIRINFO ai USING(AIRINFO_NUM)
		       JOIN AIROPT ao USING(AIROPT_NUM) ORDER BY ad.AIRDET_NUM ASC
);

-- 항공예매 뷰
CREATE VIEW AIRBOOK_VIEW
AS
(
SELECT ab.AIRBOOK_NUM, MEMBER_ID, AIRDET_NUM, AIRINFO_AIRLINE, AIRINFO_ROUTE, AIRINFO_START, AIRINFO_RETURN, AIRINFO_DATE, ab.AIRBOOK_DATE, ab.AIRBOOK_CARD, AIROPT_GRADE, ab.AIRBOOK_CNT, (PRICE * ab.AIRBOOK_CNT) AS TOTAL_PRICE
	FROM AIRDET_VIEW ad_v JOIN AIRBOOK ab USING(AIRDET_NUM) ORDER BY ab.AIRBOOK_NUM ASC
);

-- 티켓 형태로 출력을 위한 뷰
Create View TICKET_VIEW AS
SELECT A.AIRINFO_NUM, E.MEMBER_NAME, C.AIROPT_GRADE, A.AIRINFO_ROUTE, A.AIRINFO_START, A.AIRINFO_RETURN, A.AIRINFO_PRICE, A.AIRINFO_DATE, D.AIRBOOK_NUM
FROM AIRINFO AS A
LEFT JOIN AIRDET AS B
   ON A.AIRINFO_NUM = B.AIRINFO_NUM

LEFT JOIN AIROPT AS C
    ON C.AIROPT_NUM = B.AIROPT_NUM

LEFT JOIN AIRBOOK AS D
    ON D.AIRDET_NUM = B.AIRDET_NUM

LEFT JOIN MEMBER AS E
    ON E.MEMBER_ID = D.MEMBER_ID;

==================================================================================================

[ PPT 순서 ]

 0. 발표자 소개
 1. 팀명 소개 try catchers - 스토리텔링
 2. 목차 소개
 3. 기획 배경
 4. 역할 분담
 5. 타임 테이블
 6. 개발 환경
 7. ERD - User Flow - User Flow 관리자 모드 - logic process - 

View 설명 - 긴 쿼리문을 작성할 때 계속 조인을 해주기 번거롭기 때문에 따로 설정해놓은 테이블

Limit (paging 처리) : 예매를 하면 그 순간 해당 예매내역이 현재 로그인한 id의 예매내역의 제일 상위 데이터가 되기 때문에 Limit을 사용했다.


[ 주요 기능 ]

(위 2개는 시간 남으면 기능 설명)
인기순 출력
티켓 출력(예매시 출력)

필터 검색 (가격, 날짜)
예매
예약변경

예매 —> 항공권 모두 출력 —> 사용자가 항공정보번호를 입력 —> 그에 따라 제공되는 항공상세번호 (좌석 등급) —> 좌석 개수 입력 받음
—> 예약 완료

예매 변경 완료 후 mysql에서 좌석 변경이 완료 되었는지 확인

View 설명












